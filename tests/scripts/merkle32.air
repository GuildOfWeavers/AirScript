/*
 * This example shows how Merkle branch verification can be written in AirScript. 
 * In general, Merkle branch verification algorithm looks like so:
 *
 * function verify(root, index, nodes) {
 *     index += 2**nodes.length;
 * 
 *    let v = nodes[0];
 *    for (let i = 1; i < nodes.length; i++) {
 *        p = nodes[i];
 *        if (index & 1) {
 *            v = hash(p, v);
 *        }
 *        else {
 *            v = hash(v, p);
 *        }
 *        index = index >> 1;
 *    }
 * 
 *    return root === v;
 * }
 */

import { Poseidon as Hash } from '../assembly/poseidon32.aa';

define MerkleBranch over prime field (2^32 - 3 * 2^25 + 1) {

    secret input leaf       : element[1];      // leaf of the merkle branch
    secret input node       : element[1][1];   // nodes in the merkle branch
    public input indexBit   : boolean[1][1];   // binary representation of leaf position

    transition 6 registers {
        for each (leaf, node, indexBit) {

            // initialize the execution trace to hash(leaf, node) in registers [0..2]
            // and hash(node, leaf) in registers [3..5]
            init {
                s1 <- [leaf, node, 0];
                s2 <- [node, leaf, 0];
                yield [...s1, ...s2];
            }

            for each (node, indexBit) {

                // based on node's index, figure out whether hash(p, v) or hash(v, p)
                // should advance to the next iteration of the loop
                h <- indexBit ? $r3 : $r0;

                // compute hash(p, v) and hash(v, p) in parallel
                with $r[0..2] yield Hash(h, node);
                with $r[3..5] yield Hash(node, h);
            }
        }
    }

    enforce 6 constraints {
        for all steps {
            enforce transition($r) = $n;
        }
    }
}